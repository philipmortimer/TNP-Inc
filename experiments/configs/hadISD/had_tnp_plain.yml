generators:
  train:
    _target_: tnp.data.hadISD.HadISDDataGenerator
    min_nc: 1
    max_nc: 200 # 2033 is max for certain box
    nt: 250
    lat_range: ${params.lat_range}
    long_range: ${params.long_range}
    ordering_strategy: ${params.ordering_strategy}
    samples_per_epoch: 2_000
    batch_size: 32
    data_directory: ${params.train_path}
  val:
    _target_: tnp.data.hadISD.HadISDDataGenerator
    min_nc: 1
    max_nc: 200
    nt: 250
    lat_range: ${params.lat_range}
    long_range: ${params.long_range}
    ordering_strategy: ${params.ordering_strategy}
    samples_per_epoch: 1_500
    batch_size: 32
    deterministic: True
    data_directory: ${params.val_path}
  test:
    _target_: tnp.data.hadISD.HadISDDataGenerator
    min_nc: 1
    max_nc: 200
    nt: 250
    lat_range: ${params.lat_range}
    long_range: ${params.long_range}
    ordering_strategy: ${params.ordering_strategy}
    samples_per_epoch: 2_000
    batch_size: 32
    deterministic: True
    data_directory: ${params.test_path}

model:
  _target_: tnp.models.tnp.TNP
  encoder: ${tnp_encoder}
  decoder: ${tnp_decoder}
  likelihood: ${likelihood}

tnp_encoder:
  _target_: tnp.models.tnp.TNPEncoder
  transformer_encoder: ${transformer_encoder}
  xy_encoder: ${xy_encoder}

transformer_encoder:
  _target_: tnp.networks.transformer.TNPTransformerEncoder
  mhsa_layer: ${mhsa_layer}
  mhca_layer: ${mhca_layer}
  num_layers: ${params.num_layers}

mhsa_layer:
  _target_: tnp.networks.attention_layers.MultiHeadSelfAttentionLayer
  embed_dim: ${params.embed_dim}
  num_heads: ${params.num_heads}
  head_dim: ${params.head_dim}
  feedforward_dim: ${params.embed_dim}
  norm_first: ${params.norm_first}

mhca_layer:
  _target_: tnp.networks.attention_layers.MultiHeadCrossAttentionLayer
  embed_dim: ${params.embed_dim}
  num_heads: ${params.num_heads}
  head_dim: ${params.head_dim}
  feedforward_dim: ${params.embed_dim}
  norm_first: ${params.norm_first}

xy_encoder:
  _target_: tnp.networks.mlp.MLP
  in_dim: ${eval:'1 + ${params.dim_y} + ${params.dim_x}'}
  out_dim: ${params.embed_dim}
  num_layers: 2
  width: ${params.embed_dim}

tnp_decoder:
  _target_: tnp.models.tnp.TNPDecoder
  z_decoder: ${z_decoder}

z_decoder:
  _target_: tnp.networks.mlp.MLP
  in_dim: ${params.embed_dim}
  out_dim: ${eval:'2 * ${params.dim_y}'}
  num_layers: 2
  width: ${params.embed_dim}

likelihood:
  _target_: tnp.likelihoods.gaussian.HeteroscedasticNormalLikelihood

optimiser:
  _target_: torch.optim.AdamW
  _partial_: True
  lr: 5.0e-4

params:
  # Model + Training Params
  epochs: 1
  embed_dim: 128
  num_heads: 8
  head_dim: 16
  norm_first: True
  num_layers: 5

  # Fixed constants known
  dim_x: 4
  dim_y: 1

  # Data Params - this may need some hand crafted finetuning (rune the pre proc scripts first if changing ranges). Also this might not always be checked properly so ensure they are correct
  lat_range: [-20.0, 60.0]
  long_range: [-10.0, 52.0]
  ordering_strategy: "random"

  # File paths for specific training resource (adjust for machine)
  train_path: "/scratch/pm846/TNP/data/data_processed/train"
  val_path: "/scratch/pm846/TNP/data/data_processed/val"
  test_path: "/scratch/pm846/TNP/data/data_processed/test"

misc:
  project: plain-tnp-had
  name: plain-TNP-L${params.num_layers}-H${params.num_heads}-D${params.embed_dim}-rangelat-${params.lat_range}-rangelon-${params.long_range}
  resume_from_checkpoint: null
  gradient_clip_val: 0.5

  # Plot misc
  eval_name: test_eval
  seed: 1
  only_plots: False
  num_plots: 10
  subplots: True
  savefig: True
  logging: True
  plot_interval: 10
  check_val_every_n_epoch: 1
  checkpoint_interval: 10
  num_workers: 32